"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaceOfferButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const media_urls_1 = require("../constants/media-urls");
const useMediaContext_1 = require("../context/useMediaContext");
const Button_1 = require("../components/Button");
const NFTDataContext_1 = require("../context/NFTDataContext");
const nft_hooks_1 = require("@zoralabs/nft-hooks");
const PlaceOfferButton = ({ allowOffer }) => {
    const { nft } = react_1.useContext(NFTDataContext_1.NFTDataContext);
    const { getString, getStyles } = useMediaContext_1.useMediaContext();
    if (!nft.data) {
        return jsx_runtime_1.jsx(react_1.Fragment, {}, void 0);
    }
    // Disable offer functionality if not a zora NFT or if offers are disabled
    if ((allowOffer === false || !('zoraNFT' in nft.data)) &&
        nft.data.pricing.auctionType !== nft_hooks_1.AuctionType.RESERVE) {
        return jsx_runtime_1.jsx(react_1.Fragment, {}, void 0);
    }
    return (jsx_runtime_1.jsx("div", Object.assign({}, getStyles("fullPlaceOfferButton"), { children: jsx_runtime_1.jsx(Button_1.Button, Object.assign({ primary: true, href: [
                media_urls_1.ZORA_SITE_URL_BASE,
                nft.data.nft.creator,
                nft.data.nft.tokenId,
                nft.data.pricing.auctionType === nft_hooks_1.AuctionType.RESERVE
                    ? "auction/bid"
                    : "bid",
            ].join("/") }, { children: getString(nft.data.pricing.auctionType === nft_hooks_1.AuctionType.RESERVE
                ? "PLACE_BID"
                : "PLACE_OFFER") }), void 0) }), void 0));
};
exports.PlaceOfferButton = PlaceOfferButton;
