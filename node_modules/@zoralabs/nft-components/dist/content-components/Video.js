"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Video = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const useSyncRef_1 = require("../utils/useSyncRef");
const useMediaContext_1 = require("../context/useMediaContext");
exports.Video = react_1.forwardRef(({ objectProps: { onLoad, ...props }, isFullPage }, ref) => {
    const { getStyles } = useMediaContext_1.useMediaContext();
    const [isPlaying, setIsPlaying] = react_1.useState(true);
    const [isMuted, setIsMuted] = react_1.useState(true);
    const video = react_1.useRef(null);
    useSyncRef_1.useSyncRef(video, ref);
    const togglePlay = react_1.useCallback(() => {
        var _a;
        if (!video.current) {
            return;
        }
        if (video.current.paused) {
            setIsPlaying(true);
            video.current.play();
        }
        else {
            setIsPlaying(false);
            (_a = video.current) === null || _a === void 0 ? void 0 : _a.pause();
        }
    }, [video]);
    const openFullscreen = react_1.useCallback(() => {
        const elem = video.current;
        if (elem && elem.requestFullscreen) {
            elem.muted = false;
            setIsMuted(false);
            return elem.requestFullscreen();
        }
        return;
    }, [video]);
    const toggleMute = react_1.useCallback(() => {
        if (!video.current) {
            return;
        }
        if (video.current.muted) {
            setIsMuted(false);
        }
        else {
            setIsMuted(true);
        }
    }, [video]);
    const playLoop = react_1.useCallback(() => {
        if (!video.current) {
            return;
        }
        video.current.currentTime = 0;
    }, [video.current]);
    return (jsx_runtime_1.jsxs(react_1.Fragment, { children: [video.current && (jsx_runtime_1.jsxs("div", Object.assign({}, getStyles("mediaVideoControls", { isFullPage }), { children: [jsx_runtime_1.jsx("button", Object.assign({}, getStyles("mediaFullscreenButton", { muted: isMuted }), { onClick: openFullscreen }, { children: isMuted ? "Unmute" : "Mute" }), void 0),
                    jsx_runtime_1.jsx("button", Object.assign({}, getStyles("mediaPlayButton", { playing: isPlaying }), { onClick: togglePlay }, { children: isPlaying ? "Play" : "Pause" }), void 0),
                    jsx_runtime_1.jsx("button", Object.assign({}, getStyles("mediaMuteButton", { muted: isMuted }), { onClick: toggleMute }, { children: isMuted ? "Unmute" : "Mute" }), void 0)] }), void 0)),
            jsx_runtime_1.jsx("video", Object.assign({ preload: "metadata", autoPlay: true, loop: true, muted: isMuted, playsInline: true }, props, { ref: video, onEnded: playLoop, onLoadedData: onLoad }), void 0)] }, void 0));
});
