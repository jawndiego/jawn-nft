{"ast":null,"code":"import Link from 'next/link';\nimport React from 'react';\nimport * as THREE from 'three';\nimport Stats from './jsm/libs/stats.module.js';\nimport { default as Ammo } from 'ammo.js/builds/ammo';\nimport { OrbitControls } from './jsm/controls/OrbitControls.js';\nimport { BufferGeometryUtils } from './jsm/utils/BufferGeometryUtils.js';\nconst gravityVector = new Vector3(0, 0, 0);\nconst physicsPlugin = new AmmoJSPlugin(false);\nscene.enablePhysics(gravityVector, physicsPlugin);\nlet container, stats;\nlet camera, controls, scene, renderer;\nlet textureLoader;\nconst clock = new THREE.Clock();\nlet clickRequest = false;\nconst mouseCoords = new THREE.Vector2();\nconst raycaster = new THREE.Raycaster();\nconst ballMaterial = new THREE.MeshPhongMaterial({\n  color: 0x202020\n});\nconst pos = new THREE.Vector3();\nconst quat = new THREE.Quaternion(); // Physics variables\n\nconst gravityConstant = -9.8;\nlet physicsWorld;\nconst rigidBodies = [];\nconst softBodies = [];\nconst margin = 0.05;\nlet transformAux1;\nlet softBodyHelpers;\nAmmo().then(function (AmmoLib) {\n  Ammo = AmmoLib;\n  init();\n  animate();\n});\n\nfunction init() {\n  initGraphics();\n  initPhysics();\n  createObjects();\n  initInput();\n}\n\nfunction initGraphics() {\n  container = document.getElementById('container');\n  camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.2, 2000);\n  scene = new THREE.Scene();\n  scene.background = new THREE.Color(0xbfd1e5);\n  camera.position.set(-7, 5, 8);\n  renderer = new THREE.WebGLRenderer();\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  renderer.shadowMap.enabled = true;\n  container.appendChild(renderer.domElement);\n  controls = new OrbitControls(camera, renderer.domElement);\n  controls.target.set(0, 2, 0);\n  controls.update();\n  textureLoader = new THREE.TextureLoader();\n  const ambientLight = new THREE.AmbientLight(0x404040);\n  scene.add(ambientLight);\n  const light = new THREE.DirectionalLight(0xffffff, 1);\n  light.position.set(-10, 10, 5);\n  light.castShadow = true;\n  const d = 20;\n  light.shadow.camera.left = -d;\n  light.shadow.camera.right = d;\n  light.shadow.camera.top = d;\n  light.shadow.camera.bottom = -d;\n  light.shadow.camera.near = 2;\n  light.shadow.camera.far = 50;\n  light.shadow.mapSize.x = 1024;\n  light.shadow.mapSize.y = 1024;\n  scene.add(light);\n  stats = new Stats();\n  stats.domElement.style.position = 'absolute';\n  stats.domElement.style.top = '0px';\n  container.appendChild(stats.domElement);\n  window.addEventListener('resize', onWindowResize);\n}\n\nfunction initPhysics() {\n  // Physics configuration\n  const collisionConfiguration = new Ammo.btSoftBodyRigidBodyCollisionConfiguration();\n  const dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration);\n  const broadphase = new Ammo.btDbvtBroadphase();\n  const solver = new Ammo.btSequentialImpulseConstraintSolver();\n  const softBodySolver = new Ammo.btDefaultSoftBodySolver();\n  physicsWorld = new Ammo.btSoftRigidDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration, softBodySolver);\n  physicsWorld.setGravity(new Ammo.btVector3(0, gravityConstant, 0));\n  physicsWorld.getWorldInfo().set_m_gravity(new Ammo.btVector3(0, gravityConstant, 0));\n  transformAux1 = new Ammo.btTransform();\n  softBodyHelpers = new Ammo.btSoftBodyHelpers();\n}\n\nfunction createObjects() {\n  // Ground\n  pos.set(0, -0.5, 0);\n  quat.set(0, 0, 0, 1);\n  const ground = createParalellepiped(40, 1, 40, 0, pos, quat, new THREE.MeshPhongMaterial({\n    color: 0xFFFFFF\n  }));\n  ground.castShadow = true;\n  ground.receiveShadow = true;\n  textureLoader.load(\"textures/grid.png\", function (texture) {\n    texture.wrapS = THREE.RepeatWrapping;\n    texture.wrapT = THREE.RepeatWrapping;\n    texture.repeat.set(40, 40);\n    ground.material.map = texture;\n    ground.material.needsUpdate = true;\n  }); // Create soft volumes\n\n  const volumeMass = 15;\n  const sphereGeometry = new THREE.SphereGeometry(1.5, 40, 25);\n  sphereGeometry.translate(5, 5, 0);\n  createSoftVolume(sphereGeometry, volumeMass, 250);\n  const boxGeometry = new THREE.BoxGeometry(1, 1, 5, 4, 4, 20);\n  boxGeometry.translate(-2, 5, 0);\n  createSoftVolume(boxGeometry, volumeMass, 120); // Ramp\n\n  pos.set(3, 1, 0);\n  quat.setFromAxisAngle(new THREE.Vector3(0, 0, 1), 30 * Math.PI / 180);\n  const obstacle = createParalellepiped(10, 1, 4, 0, pos, quat, new THREE.MeshPhongMaterial({\n    color: 0x606060\n  }));\n  obstacle.castShadow = true;\n  obstacle.receiveShadow = true;\n}\n\nfunction processGeometry(bufGeometry) {\n  // Ony consider the position values when merging the vertices\n  const posOnlyBufGeometry = new THREE.BufferGeometry();\n  posOnlyBufGeometry.setAttribute('position', bufGeometry.getAttribute('position'));\n  posOnlyBufGeometry.setIndex(bufGeometry.getIndex()); // Merge the vertices so the triangle soup is converted to indexed triangles\n\n  const indexedBufferGeom = BufferGeometryUtils.mergeVertices(posOnlyBufGeometry); // Create index arrays mapping the indexed vertices to bufGeometry vertices\n\n  mapIndices(bufGeometry, indexedBufferGeom);\n}\n\nfunction isEqual(x1, y1, z1, x2, y2, z2) {\n  const delta = 0.000001;\n  return Math.abs(x2 - x1) < delta && Math.abs(y2 - y1) < delta && Math.abs(z2 - z1) < delta;\n}\n\nfunction mapIndices(bufGeometry, indexedBufferGeom) {\n  // Creates ammoVertices, ammoIndices and ammoIndexAssociation in bufGeometry\n  const vertices = bufGeometry.attributes.position.array;\n  const idxVertices = indexedBufferGeom.attributes.position.array;\n  const indices = indexedBufferGeom.index.array;\n  const numIdxVertices = idxVertices.length / 3;\n  const numVertices = vertices.length / 3;\n  bufGeometry.ammoVertices = idxVertices;\n  bufGeometry.ammoIndices = indices;\n  bufGeometry.ammoIndexAssociation = [];\n\n  for (let i = 0; i < numIdxVertices; i++) {\n    const association = [];\n    bufGeometry.ammoIndexAssociation.push(association);\n    const i3 = i * 3;\n\n    for (let j = 0; j < numVertices; j++) {\n      const j3 = j * 3;\n\n      if (isEqual(idxVertices[i3], idxVertices[i3 + 1], idxVertices[i3 + 2], vertices[j3], vertices[j3 + 1], vertices[j3 + 2])) {\n        association.push(j3);\n      }\n    }\n  }\n}\n\nfunction createSoftVolume(bufferGeom, mass, pressure) {\n  processGeometry(bufferGeom);\n  const volume = new THREE.Mesh(bufferGeom, new THREE.MeshPhongMaterial({\n    color: 0xFFFFFF\n  }));\n  volume.castShadow = true;\n  volume.receiveShadow = true;\n  volume.frustumCulled = false;\n  scene.add(volume);\n  textureLoader.load(\"textures/colors.png\", function (texture) {\n    volume.material.map = texture;\n    volume.material.needsUpdate = true;\n  }); // Volume physic object\n\n  const volumeSoftBody = softBodyHelpers.CreateFromTriMesh(physicsWorld.getWorldInfo(), bufferGeom.ammoVertices, bufferGeom.ammoIndices, bufferGeom.ammoIndices.length / 3, true);\n  const sbConfig = volumeSoftBody.get_m_cfg();\n  sbConfig.set_viterations(40);\n  sbConfig.set_piterations(40); // Soft-soft and soft-rigid collisions\n\n  sbConfig.set_collisions(0x11); // Friction\n\n  sbConfig.set_kDF(0.1); // Damping\n\n  sbConfig.set_kDP(0.01); // Pressure\n\n  sbConfig.set_kPR(pressure); // Stiffness\n\n  volumeSoftBody.get_m_materials().at(0).set_m_kLST(0.9);\n  volumeSoftBody.get_m_materials().at(0).set_m_kAST(0.9);\n  volumeSoftBody.setTotalMass(mass, false);\n  Ammo.castObject(volumeSoftBody, Ammo.btCollisionObject).getCollisionShape().setMargin(margin);\n  physicsWorld.addSoftBody(volumeSoftBody, 1, -1);\n  volume.userData.physicsBody = volumeSoftBody; // Disable deactivation\n\n  volumeSoftBody.setActivationState(4);\n  softBodies.push(volume);\n}\n\nfunction createParalellepiped(sx, sy, sz, mass, pos, quat, material) {\n  const threeObject = new THREE.Mesh(new THREE.BoxGeometry(sx, sy, sz, 1, 1, 1), material);\n  const shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5, sy * 0.5, sz * 0.5));\n  shape.setMargin(margin);\n  createRigidBody(threeObject, shape, mass, pos, quat);\n  return threeObject;\n}\n\nfunction createRigidBody(threeObject, physicsShape, mass, pos, quat) {\n  threeObject.position.copy(pos);\n  threeObject.quaternion.copy(quat);\n  const transform = new Ammo.btTransform();\n  transform.setIdentity();\n  transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));\n  transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));\n  const motionState = new Ammo.btDefaultMotionState(transform);\n  const localInertia = new Ammo.btVector3(0, 0, 0);\n  physicsShape.calculateLocalInertia(mass, localInertia);\n  const rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, physicsShape, localInertia);\n  const body = new Ammo.btRigidBody(rbInfo);\n  threeObject.userData.physicsBody = body;\n  scene.add(threeObject);\n\n  if (mass > 0) {\n    rigidBodies.push(threeObject); // Disable deactivation\n\n    body.setActivationState(4);\n  }\n\n  physicsWorld.addRigidBody(body);\n  return body;\n}\n\nfunction initInput() {\n  window.addEventListener('pointerdown', function (event) {\n    if (!clickRequest) {\n      mouseCoords.set(event.clientX / window.innerWidth * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1);\n      clickRequest = true;\n    }\n  });\n}\n\nfunction processClick() {\n  if (clickRequest) {\n    raycaster.setFromCamera(mouseCoords, camera); // Creates a ball\n\n    const ballMass = 3;\n    const ballRadius = 0.4;\n    const ball = new THREE.Mesh(new THREE.SphereGeometry(ballRadius, 18, 16), ballMaterial);\n    ball.castShadow = true;\n    ball.receiveShadow = true;\n    const ballShape = new Ammo.btSphereShape(ballRadius);\n    ballShape.setMargin(margin);\n    pos.copy(raycaster.ray.direction);\n    pos.add(raycaster.ray.origin);\n    quat.set(0, 0, 0, 1);\n    const ballBody = createRigidBody(ball, ballShape, ballMass, pos, quat);\n    ballBody.setFriction(0.5);\n    pos.copy(raycaster.ray.direction);\n    pos.multiplyScalar(14);\n    ballBody.setLinearVelocity(new Ammo.btVector3(pos.x, pos.y, pos.z));\n    clickRequest = false;\n  }\n}\n\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\nfunction animate() {\n  requestAnimationFrame(animate);\n  render();\n  stats.update();\n}\n\nfunction render() {\n  const deltaTime = clock.getDelta();\n  updatePhysics(deltaTime);\n  processClick();\n  renderer.render(scene, camera);\n}\n\nfunction updatePhysics(deltaTime) {\n  // Step world\n  physicsWorld.stepSimulation(deltaTime, 10); // Update soft volumes\n\n  for (let i = 0, il = softBodies.length; i < il; i++) {\n    const volume = softBodies[i];\n    const geometry = volume.geometry;\n    const softBody = volume.userData.physicsBody;\n    const volumePositions = geometry.attributes.position.array;\n    const volumeNormals = geometry.attributes.normal.array;\n    const association = geometry.ammoIndexAssociation;\n    const numVerts = association.length;\n    const nodes = softBody.get_m_nodes();\n\n    for (let j = 0; j < numVerts; j++) {\n      const node = nodes.at(j);\n      const nodePos = node.get_m_x();\n      const x = nodePos.x();\n      const y = nodePos.y();\n      const z = nodePos.z();\n      const nodeNormal = node.get_m_n();\n      const nx = nodeNormal.x();\n      const ny = nodeNormal.y();\n      const nz = nodeNormal.z();\n      const assocVertex = association[j];\n\n      for (let k = 0, kl = assocVertex.length; k < kl; k++) {\n        let indexVertex = assocVertex[k];\n        volumePositions[indexVertex] = x;\n        volumeNormals[indexVertex] = nx;\n        indexVertex++;\n        volumePositions[indexVertex] = y;\n        volumeNormals[indexVertex] = ny;\n        indexVertex++;\n        volumePositions[indexVertex] = z;\n        volumeNormals[indexVertex] = nz;\n      }\n    }\n\n    geometry.attributes.position.needsUpdate = true;\n    geometry.attributes.normal.needsUpdate = true;\n  } // Update rigid bodies\n\n\n  for (let i = 0, il = rigidBodies.length; i < il; i++) {\n    const objThree = rigidBodies[i];\n    const objPhys = objThree.userData.physicsBody;\n    const ms = objPhys.getMotionState();\n\n    if (ms) {\n      ms.getWorldTransform(transformAux1);\n      const p = transformAux1.getOrigin();\n      const q = transformAux1.getRotation();\n      objThree.position.set(p.x(), p.y(), p.z());\n      objThree.quaternion.set(q.x(), q.y(), q.z(), q.w());\n    }\n  }\n}\n\nexport default FrontCouch;","map":{"version":3,"sources":["/Users/jawn/Documents/GitHub/jawn-nft/components/frontcouch.js"],"names":["Link","React","THREE","Stats","default","Ammo","OrbitControls","BufferGeometryUtils","gravityVector","Vector3","physicsPlugin","AmmoJSPlugin","scene","enablePhysics","container","stats","camera","controls","renderer","textureLoader","clock","Clock","clickRequest","mouseCoords","Vector2","raycaster","Raycaster","ballMaterial","MeshPhongMaterial","color","pos","quat","Quaternion","gravityConstant","physicsWorld","rigidBodies","softBodies","margin","transformAux1","softBodyHelpers","then","AmmoLib","init","animate","initGraphics","initPhysics","createObjects","initInput","document","getElementById","PerspectiveCamera","window","innerWidth","innerHeight","Scene","background","Color","position","set","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","shadowMap","enabled","appendChild","domElement","target","update","TextureLoader","ambientLight","AmbientLight","add","light","DirectionalLight","castShadow","d","shadow","left","right","top","bottom","near","far","mapSize","x","y","style","addEventListener","onWindowResize","collisionConfiguration","btSoftBodyRigidBodyCollisionConfiguration","dispatcher","btCollisionDispatcher","broadphase","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","softBodySolver","btDefaultSoftBodySolver","btSoftRigidDynamicsWorld","setGravity","btVector3","getWorldInfo","set_m_gravity","btTransform","btSoftBodyHelpers","ground","createParalellepiped","receiveShadow","load","texture","wrapS","RepeatWrapping","wrapT","repeat","material","map","needsUpdate","volumeMass","sphereGeometry","SphereGeometry","translate","createSoftVolume","boxGeometry","BoxGeometry","setFromAxisAngle","Math","PI","obstacle","processGeometry","bufGeometry","posOnlyBufGeometry","BufferGeometry","setAttribute","getAttribute","setIndex","getIndex","indexedBufferGeom","mergeVertices","mapIndices","isEqual","x1","y1","z1","x2","y2","z2","delta","abs","vertices","attributes","array","idxVertices","indices","index","numIdxVertices","length","numVertices","ammoVertices","ammoIndices","ammoIndexAssociation","i","association","push","i3","j","j3","bufferGeom","mass","pressure","volume","Mesh","frustumCulled","volumeSoftBody","CreateFromTriMesh","sbConfig","get_m_cfg","set_viterations","set_piterations","set_collisions","set_kDF","set_kDP","set_kPR","get_m_materials","at","set_m_kLST","set_m_kAST","setTotalMass","castObject","btCollisionObject","getCollisionShape","setMargin","addSoftBody","userData","physicsBody","setActivationState","sx","sy","sz","threeObject","shape","btBoxShape","createRigidBody","physicsShape","copy","quaternion","transform","setIdentity","setOrigin","z","setRotation","btQuaternion","w","motionState","btDefaultMotionState","localInertia","calculateLocalInertia","rbInfo","btRigidBodyConstructionInfo","body","btRigidBody","addRigidBody","event","clientX","clientY","processClick","setFromCamera","ballMass","ballRadius","ball","ballShape","btSphereShape","ray","direction","origin","ballBody","setFriction","multiplyScalar","setLinearVelocity","aspect","updateProjectionMatrix","requestAnimationFrame","render","deltaTime","getDelta","updatePhysics","stepSimulation","il","geometry","softBody","volumePositions","volumeNormals","normal","numVerts","nodes","get_m_nodes","node","nodePos","get_m_x","nodeNormal","get_m_n","nx","ny","nz","assocVertex","k","kl","indexVertex","objThree","objPhys","ms","getMotionState","getWorldTransform","p","getOrigin","q","getRotation","FrontCouch"],"mappings":"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","sourcesContent":["import Link from 'next/link'\nimport React from 'react'\nimport * as THREE from 'three'\nimport Stats from './jsm/libs/stats.module.js'\nimport { default as Ammo } from 'ammo.js/builds/ammo'\nimport { OrbitControls } from './jsm/controls/OrbitControls.js';\nimport { BufferGeometryUtils } from './jsm/utils/BufferGeometryUtils.js'\n\nconst gravityVector = new Vector3(0, 0, 0);\nconst physicsPlugin = new AmmoJSPlugin(false);\nscene.enablePhysics(gravityVector, physicsPlugin);\n\nlet container, stats;\n\t\t\tlet camera, controls, scene, renderer;\n\t\t\tlet textureLoader;\n\t\t\tconst clock = new THREE.Clock();\n\t\t\tlet clickRequest = false;\n\t\t\tconst mouseCoords = new THREE.Vector2();\n\t\t\tconst raycaster = new THREE.Raycaster();\n\t\t\tconst ballMaterial = new THREE.MeshPhongMaterial( { color: 0x202020 } );\n\t\t\tconst pos = new THREE.Vector3();\n\t\t\tconst quat = new THREE.Quaternion();\n\n\t\t\t// Physics variables\n\t\t\tconst gravityConstant = - 9.8;\n\t\t\tlet physicsWorld;\n\t\t\tconst rigidBodies = [];\n\t\t\tconst softBodies = [];\n\t\t\tconst margin = 0.05;\n\t\t\tlet transformAux1;\n\t\t\tlet softBodyHelpers;\n\n\t\t\tAmmo().then( function ( AmmoLib ) {\n\n\t\t\t\tAmmo = AmmoLib;\n\n\t\t\t\tinit();\n\t\t\t\tanimate();\n\n\t\t\t} );\n\n\t\t\tfunction init() {\n\n\t\t\t\tinitGraphics();\n\n\t\t\t\tinitPhysics();\n\n\t\t\t\tcreateObjects();\n\n\t\t\t\tinitInput();\n\n\t\t\t}\n\n\t\t\tfunction initGraphics() {\n\n\t\t\t\tcontainer = document.getElementById( 'container' );\n\n\t\t\t\tcamera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 0.2, 2000 );\n\n\t\t\t\tscene = new THREE.Scene();\n\t\t\t\tscene.background = new THREE.Color( 0xbfd1e5 );\n\n\t\t\t\tcamera.position.set( - 7, 5, 8 );\n\n\t\t\t\trenderer = new THREE.WebGLRenderer();\n\t\t\t\trenderer.setPixelRatio( window.devicePixelRatio );\n\t\t\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\t\t\t\trenderer.shadowMap.enabled = true;\n\t\t\t\tcontainer.appendChild( renderer.domElement );\n\n\t\t\t\tcontrols = new OrbitControls( camera, renderer.domElement );\n\t\t\t\tcontrols.target.set( 0, 2, 0 );\n\t\t\t\tcontrols.update();\n\n\t\t\t\ttextureLoader = new THREE.TextureLoader();\n\n\t\t\t\tconst ambientLight = new THREE.AmbientLight( 0x404040 );\n\t\t\t\tscene.add( ambientLight );\n\n\t\t\t\tconst light = new THREE.DirectionalLight( 0xffffff, 1 );\n\t\t\t\tlight.position.set( - 10, 10, 5 );\n\t\t\t\tlight.castShadow = true;\n\t\t\t\tconst d = 20;\n\t\t\t\tlight.shadow.camera.left = - d;\n\t\t\t\tlight.shadow.camera.right = d;\n\t\t\t\tlight.shadow.camera.top = d;\n\t\t\t\tlight.shadow.camera.bottom = - d;\n\n\t\t\t\tlight.shadow.camera.near = 2;\n\t\t\t\tlight.shadow.camera.far = 50;\n\n\t\t\t\tlight.shadow.mapSize.x = 1024;\n\t\t\t\tlight.shadow.mapSize.y = 1024;\n\n\t\t\t\tscene.add( light );\n\n\t\t\t\tstats = new Stats();\n\t\t\t\tstats.domElement.style.position = 'absolute';\n\t\t\t\tstats.domElement.style.top = '0px';\n\t\t\t\tcontainer.appendChild( stats.domElement );\n\n\n\t\t\t\twindow.addEventListener( 'resize', onWindowResize );\n\n\t\t\t}\n\n\t\t\tfunction initPhysics() {\n\n\t\t\t\t// Physics configuration\n\n\t\t\t\tconst collisionConfiguration = new Ammo.btSoftBodyRigidBodyCollisionConfiguration();\n\t\t\t\tconst dispatcher = new Ammo.btCollisionDispatcher( collisionConfiguration );\n\t\t\t\tconst broadphase = new Ammo.btDbvtBroadphase();\n\t\t\t\tconst solver = new Ammo.btSequentialImpulseConstraintSolver();\n\t\t\t\tconst softBodySolver = new Ammo.btDefaultSoftBodySolver();\n\t\t\t\tphysicsWorld = new Ammo.btSoftRigidDynamicsWorld( dispatcher, broadphase, solver, collisionConfiguration, softBodySolver );\n\t\t\t\tphysicsWorld.setGravity( new Ammo.btVector3( 0, gravityConstant, 0 ) );\n\t\t\t\tphysicsWorld.getWorldInfo().set_m_gravity( new Ammo.btVector3( 0, gravityConstant, 0 ) );\n\n\t\t\t\ttransformAux1 = new Ammo.btTransform();\n\t\t\t\tsoftBodyHelpers = new Ammo.btSoftBodyHelpers();\n\n\t\t\t}\n\n\t\t\tfunction createObjects() {\n\n\t\t\t\t// Ground\n\t\t\t\tpos.set( 0, - 0.5, 0 );\n\t\t\t\tquat.set( 0, 0, 0, 1 );\n\t\t\t\tconst ground = createParalellepiped( 40, 1, 40, 0, pos, quat, new THREE.MeshPhongMaterial( { color: 0xFFFFFF } ) );\n\t\t\t\tground.castShadow = true;\n\t\t\t\tground.receiveShadow = true;\n\t\t\t\ttextureLoader.load( \"textures/grid.png\", function ( texture ) {\n\n\t\t\t\t\ttexture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\ttexture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\ttexture.repeat.set( 40, 40 );\n\t\t\t\t\tground.material.map = texture;\n\t\t\t\t\tground.material.needsUpdate = true;\n\n\t\t\t\t} );\n\n\t\t\t\t// Create soft volumes\n\t\t\t\tconst volumeMass = 15;\n\n\t\t\t\tconst sphereGeometry = new THREE.SphereGeometry( 1.5, 40, 25 );\n\t\t\t\tsphereGeometry.translate( 5, 5, 0 );\n\t\t\t\tcreateSoftVolume( sphereGeometry, volumeMass, 250 );\n\n\t\t\t\tconst boxGeometry = new THREE.BoxGeometry( 1, 1, 5, 4, 4, 20 );\n\t\t\t\tboxGeometry.translate( - 2, 5, 0 );\n\t\t\t\tcreateSoftVolume( boxGeometry, volumeMass, 120 );\n\n\t\t\t\t// Ramp\n\t\t\t\tpos.set( 3, 1, 0 );\n\t\t\t\tquat.setFromAxisAngle( new THREE.Vector3( 0, 0, 1 ), 30 * Math.PI / 180 );\n\t\t\t\tconst obstacle = createParalellepiped( 10, 1, 4, 0, pos, quat, new THREE.MeshPhongMaterial( { color: 0x606060 } ) );\n\t\t\t\tobstacle.castShadow = true;\n\t\t\t\tobstacle.receiveShadow = true;\n\n\t\t\t}\n\n\t\t\tfunction processGeometry( bufGeometry ) {\n\n\t\t\t\t// Ony consider the position values when merging the vertices\n\t\t\t\tconst posOnlyBufGeometry = new THREE.BufferGeometry();\n\t\t\t\tposOnlyBufGeometry.setAttribute( 'position', bufGeometry.getAttribute( 'position' ) );\n\t\t\t\tposOnlyBufGeometry.setIndex( bufGeometry.getIndex() );\n\n\t\t\t\t// Merge the vertices so the triangle soup is converted to indexed triangles\n\t\t\t\tconst indexedBufferGeom = BufferGeometryUtils.mergeVertices( posOnlyBufGeometry );\n\n\t\t\t\t// Create index arrays mapping the indexed vertices to bufGeometry vertices\n\t\t\t\tmapIndices( bufGeometry, indexedBufferGeom );\n\n\t\t\t}\n\n\t\t\tfunction isEqual( x1, y1, z1, x2, y2, z2 ) {\n\n\t\t\t\tconst delta = 0.000001;\n\t\t\t\treturn Math.abs( x2 - x1 ) < delta &&\n\t\t\t\t\t\tMath.abs( y2 - y1 ) < delta &&\n\t\t\t\t\t\tMath.abs( z2 - z1 ) < delta;\n\n\t\t\t}\n\n\t\t\tfunction mapIndices( bufGeometry, indexedBufferGeom ) {\n\n\t\t\t\t// Creates ammoVertices, ammoIndices and ammoIndexAssociation in bufGeometry\n\n\t\t\t\tconst vertices = bufGeometry.attributes.position.array;\n\t\t\t\tconst idxVertices = indexedBufferGeom.attributes.position.array;\n\t\t\t\tconst indices = indexedBufferGeom.index.array;\n\n\t\t\t\tconst numIdxVertices = idxVertices.length / 3;\n\t\t\t\tconst numVertices = vertices.length / 3;\n\n\t\t\t\tbufGeometry.ammoVertices = idxVertices;\n\t\t\t\tbufGeometry.ammoIndices = indices;\n\t\t\t\tbufGeometry.ammoIndexAssociation = [];\n\n\t\t\t\tfor ( let i = 0; i < numIdxVertices; i ++ ) {\n\n\t\t\t\t\tconst association = [];\n\t\t\t\t\tbufGeometry.ammoIndexAssociation.push( association );\n\n\t\t\t\t\tconst i3 = i * 3;\n\n\t\t\t\t\tfor ( let j = 0; j < numVertices; j ++ ) {\n\n\t\t\t\t\t\tconst j3 = j * 3;\n\t\t\t\t\t\tif ( isEqual( idxVertices[ i3 ], idxVertices[ i3 + 1 ], idxVertices[ i3 + 2 ],\n\t\t\t\t\t\t\tvertices[ j3 ], vertices[ j3 + 1 ], vertices[ j3 + 2 ] ) ) {\n\n\t\t\t\t\t\t\tassociation.push( j3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction createSoftVolume( bufferGeom, mass, pressure ) {\n\n\t\t\t\tprocessGeometry( bufferGeom );\n\n\t\t\t\tconst volume = new THREE.Mesh( bufferGeom, new THREE.MeshPhongMaterial( { color: 0xFFFFFF } ) );\n\t\t\t\tvolume.castShadow = true;\n\t\t\t\tvolume.receiveShadow = true;\n\t\t\t\tvolume.frustumCulled = false;\n\t\t\t\tscene.add( volume );\n\n\t\t\t\ttextureLoader.load( \"textures/colors.png\", function ( texture ) {\n\n\t\t\t\t\tvolume.material.map = texture;\n\t\t\t\t\tvolume.material.needsUpdate = true;\n\n\t\t\t\t} );\n\n\t\t\t\t// Volume physic object\n\n\t\t\t\tconst volumeSoftBody = softBodyHelpers.CreateFromTriMesh(\n\t\t\t\t\tphysicsWorld.getWorldInfo(),\n\t\t\t\t\tbufferGeom.ammoVertices,\n\t\t\t\t\tbufferGeom.ammoIndices,\n\t\t\t\t\tbufferGeom.ammoIndices.length / 3,\n\t\t\t\t\ttrue );\n\n\t\t\t\tconst sbConfig = volumeSoftBody.get_m_cfg();\n\t\t\t\tsbConfig.set_viterations( 40 );\n\t\t\t\tsbConfig.set_piterations( 40 );\n\n\t\t\t\t// Soft-soft and soft-rigid collisions\n\t\t\t\tsbConfig.set_collisions( 0x11 );\n\n\t\t\t\t// Friction\n\t\t\t\tsbConfig.set_kDF( 0.1 );\n\t\t\t\t// Damping\n\t\t\t\tsbConfig.set_kDP( 0.01 );\n\t\t\t\t// Pressure\n\t\t\t\tsbConfig.set_kPR( pressure );\n\t\t\t\t// Stiffness\n\t\t\t\tvolumeSoftBody.get_m_materials().at( 0 ).set_m_kLST( 0.9 );\n\t\t\t\tvolumeSoftBody.get_m_materials().at( 0 ).set_m_kAST( 0.9 );\n\n\t\t\t\tvolumeSoftBody.setTotalMass( mass, false );\n\t\t\t\tAmmo.castObject( volumeSoftBody, Ammo.btCollisionObject ).getCollisionShape().setMargin( margin );\n\t\t\t\tphysicsWorld.addSoftBody( volumeSoftBody, 1, - 1 );\n\t\t\t\tvolume.userData.physicsBody = volumeSoftBody;\n\t\t\t\t// Disable deactivation\n\t\t\t\tvolumeSoftBody.setActivationState( 4 );\n\n\t\t\t\tsoftBodies.push( volume );\n\n\t\t\t}\n\n\t\t\tfunction createParalellepiped( sx, sy, sz, mass, pos, quat, material ) {\n\n\t\t\t\tconst threeObject = new THREE.Mesh( new THREE.BoxGeometry( sx, sy, sz, 1, 1, 1 ), material );\n\t\t\t\tconst shape = new Ammo.btBoxShape( new Ammo.btVector3( sx * 0.5, sy * 0.5, sz * 0.5 ) );\n\t\t\t\tshape.setMargin( margin );\n\n\t\t\t\tcreateRigidBody( threeObject, shape, mass, pos, quat );\n\n\t\t\t\treturn threeObject;\n\n\t\t\t}\n\n\t\t\tfunction createRigidBody( threeObject, physicsShape, mass, pos, quat ) {\n\n\t\t\t\tthreeObject.position.copy( pos );\n\t\t\t\tthreeObject.quaternion.copy( quat );\n\n\t\t\t\tconst transform = new Ammo.btTransform();\n\t\t\t\ttransform.setIdentity();\n\t\t\t\ttransform.setOrigin( new Ammo.btVector3( pos.x, pos.y, pos.z ) );\n\t\t\t\ttransform.setRotation( new Ammo.btQuaternion( quat.x, quat.y, quat.z, quat.w ) );\n\t\t\t\tconst motionState = new Ammo.btDefaultMotionState( transform );\n\n\t\t\t\tconst localInertia = new Ammo.btVector3( 0, 0, 0 );\n\t\t\t\tphysicsShape.calculateLocalInertia( mass, localInertia );\n\n\t\t\t\tconst rbInfo = new Ammo.btRigidBodyConstructionInfo( mass, motionState, physicsShape, localInertia );\n\t\t\t\tconst body = new Ammo.btRigidBody( rbInfo );\n\n\t\t\t\tthreeObject.userData.physicsBody = body;\n\n\t\t\t\tscene.add( threeObject );\n\n\t\t\t\tif ( mass > 0 ) {\n\n\t\t\t\t\trigidBodies.push( threeObject );\n\n\t\t\t\t\t// Disable deactivation\n\t\t\t\t\tbody.setActivationState( 4 );\n\n\t\t\t\t}\n\n\t\t\t\tphysicsWorld.addRigidBody( body );\n\n\t\t\t\treturn body;\n\n\t\t\t}\n\n\t\t\tfunction initInput() {\n\n\t\t\t\twindow.addEventListener( 'pointerdown', function ( event ) {\n\n\t\t\t\t\tif ( ! clickRequest ) {\n\n\t\t\t\t\t\tmouseCoords.set(\n\t\t\t\t\t\t\t( event.clientX / window.innerWidth ) * 2 - 1,\n\t\t\t\t\t\t\t- ( event.clientY / window.innerHeight ) * 2 + 1\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tclickRequest = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tfunction processClick() {\n\n\t\t\t\tif ( clickRequest ) {\n\n\t\t\t\t\traycaster.setFromCamera( mouseCoords, camera );\n\n\t\t\t\t\t// Creates a ball\n\t\t\t\t\tconst ballMass = 3;\n\t\t\t\t\tconst ballRadius = 0.4;\n\n\t\t\t\t\tconst ball = new THREE.Mesh( new THREE.SphereGeometry( ballRadius, 18, 16 ), ballMaterial );\n\t\t\t\t\tball.castShadow = true;\n\t\t\t\t\tball.receiveShadow = true;\n\t\t\t\t\tconst ballShape = new Ammo.btSphereShape( ballRadius );\n\t\t\t\t\tballShape.setMargin( margin );\n\t\t\t\t\tpos.copy( raycaster.ray.direction );\n\t\t\t\t\tpos.add( raycaster.ray.origin );\n\t\t\t\t\tquat.set( 0, 0, 0, 1 );\n\t\t\t\t\tconst ballBody = createRigidBody( ball, ballShape, ballMass, pos, quat );\n\t\t\t\t\tballBody.setFriction( 0.5 );\n\n\t\t\t\t\tpos.copy( raycaster.ray.direction );\n\t\t\t\t\tpos.multiplyScalar( 14 );\n\t\t\t\t\tballBody.setLinearVelocity( new Ammo.btVector3( pos.x, pos.y, pos.z ) );\n\n\t\t\t\t\tclickRequest = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction onWindowResize() {\n\n\t\t\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t\t\t}\n\n\t\t\tfunction animate() {\n\n\t\t\t\trequestAnimationFrame( animate );\n\n\t\t\t\trender();\n\t\t\t\tstats.update();\n\n\t\t\t}\n\n\t\t\tfunction render() {\n\n\t\t\t\tconst deltaTime = clock.getDelta();\n\n\t\t\t\tupdatePhysics( deltaTime );\n\n\t\t\t\tprocessClick();\n\n\t\t\t\trenderer.render( scene, camera );\n\n\t\t\t}\n\n\t\t\tfunction updatePhysics( deltaTime ) {\n\n\t\t\t\t// Step world\n\t\t\t\tphysicsWorld.stepSimulation( deltaTime, 10 );\n\n\t\t\t\t// Update soft volumes\n\t\t\t\tfor ( let i = 0, il = softBodies.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst volume = softBodies[ i ];\n\t\t\t\t\tconst geometry = volume.geometry;\n\t\t\t\t\tconst softBody = volume.userData.physicsBody;\n\t\t\t\t\tconst volumePositions = geometry.attributes.position.array;\n\t\t\t\t\tconst volumeNormals = geometry.attributes.normal.array;\n\t\t\t\t\tconst association = geometry.ammoIndexAssociation;\n\t\t\t\t\tconst numVerts = association.length;\n\t\t\t\t\tconst nodes = softBody.get_m_nodes();\n\t\t\t\t\tfor ( let j = 0; j < numVerts; j ++ ) {\n\n\t\t\t\t\t\tconst node = nodes.at( j );\n\t\t\t\t\t\tconst nodePos = node.get_m_x();\n\t\t\t\t\t\tconst x = nodePos.x();\n\t\t\t\t\t\tconst y = nodePos.y();\n\t\t\t\t\t\tconst z = nodePos.z();\n\t\t\t\t\t\tconst nodeNormal = node.get_m_n();\n\t\t\t\t\t\tconst nx = nodeNormal.x();\n\t\t\t\t\t\tconst ny = nodeNormal.y();\n\t\t\t\t\t\tconst nz = nodeNormal.z();\n\n\t\t\t\t\t\tconst assocVertex = association[ j ];\n\n\t\t\t\t\t\tfor ( let k = 0, kl = assocVertex.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tlet indexVertex = assocVertex[ k ];\n\t\t\t\t\t\t\tvolumePositions[ indexVertex ] = x;\n\t\t\t\t\t\t\tvolumeNormals[ indexVertex ] = nx;\n\t\t\t\t\t\t\tindexVertex ++;\n\t\t\t\t\t\t\tvolumePositions[ indexVertex ] = y;\n\t\t\t\t\t\t\tvolumeNormals[ indexVertex ] = ny;\n\t\t\t\t\t\t\tindexVertex ++;\n\t\t\t\t\t\t\tvolumePositions[ indexVertex ] = z;\n\t\t\t\t\t\t\tvolumeNormals[ indexVertex ] = nz;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.attributes.position.needsUpdate = true;\n\t\t\t\t\tgeometry.attributes.normal.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\t// Update rigid bodies\n\t\t\t\tfor ( let i = 0, il = rigidBodies.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst objThree = rigidBodies[ i ];\n\t\t\t\t\tconst objPhys = objThree.userData.physicsBody;\n\t\t\t\t\tconst ms = objPhys.getMotionState();\n\t\t\t\t\tif ( ms ) {\n\n\t\t\t\t\t\tms.getWorldTransform( transformAux1 );\n\t\t\t\t\t\tconst p = transformAux1.getOrigin();\n\t\t\t\t\t\tconst q = transformAux1.getRotation();\n\t\t\t\t\t\tobjThree.position.set( p.x(), p.y(), p.z() );\n\t\t\t\t\t\tobjThree.quaternion.set( q.x(), q.y(), q.z(), q.w() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\nexport default FrontCouch"]},"metadata":{},"sourceType":"module"}