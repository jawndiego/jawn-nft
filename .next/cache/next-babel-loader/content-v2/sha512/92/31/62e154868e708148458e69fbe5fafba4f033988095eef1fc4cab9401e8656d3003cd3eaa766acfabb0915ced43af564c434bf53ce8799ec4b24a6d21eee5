{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jawn/Documents/GitHub/jawn-nft/components/models.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as THREE from 'three';\nimport React, { Suspense, useState, useRef } from 'react';\nimport { Canvas, useFrame, createPortal } from '@react-three/fiber';\nimport { useGLTF, Stage, Sky, Stars, useFBO, OrbitControls, rotation, PerspectiveCamera, CameraShake, ContactShadows } from '@react-three/drei'; // NEW FORMAT CODE GENERATOR \n//MIRRORCHAR\n\nexport function ObjectListMirror(props) {\n  //objectsMirror\n  const objects = [{\n    name: 'angel',\n    pathname: 'angel',\n    material: 'Cactus',\n    position: [-1.9, 9, 8],\n    scale: [22, 22, 22],\n    rotation: [-2.9, 0, .49]\n  }, {\n    name: 'heem',\n    pathname: 'heem',\n    material: 'Cactus',\n    position: [-2.9, 12, 7],\n    scale: [15, 15, 15],\n    rotation: [0, -2, -.11]\n  }, {\n    name: 'boxer',\n    pathname: 'boxer',\n    material: 'Cactus',\n    position: [-5, 0, 12],\n    scale: [15, 15, 15],\n    rotation: [0, -4, 0]\n  }];\n  const randomIndex = Math.floor(Math.random() * objects.length);\n  let randomObject = objects[randomIndex];\n  let {\n    name,\n    pathname,\n    material,\n    position,\n    scale,\n    rotation\n  } = randomObject;\n  const group = useRef();\n  const {\n    scene,\n    nodes,\n    materials\n  } = useGLTF(`./about-pictures/${pathname}.glb`);\n  useFrame(state => {\n    // This function runs 60 times/second, it binds this component to the render-loop.\n    // On unmount this subscription is cleaned up automatically.\n    // Rotate \n    const t = state.clock.getElapsedTime(); // Make it float\n\n    group.current.rotation.z = Math.sin(t / 12) / 5;\n    group.current.rotation.x = Math.cos(t) / 9;\n    group.current.rotation.y = Math.sin(t / 12) / 5;\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 10)) / 5;\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: randomObject.rotation,\n      scale: randomObject.scale,\n      position: randomObject.position,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes[pathname].geometry,\n        material: materials[material]\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n} //Center character \n\nexport function ObjectListCenter(props) {\n  //objects center \n  const objects = [{\n    name: 'plant',\n    pathname: 'planta',\n    material: 'StandardDFD8D4',\n    position: [-12.5, 3.25, 6],\n    scale: [3.67, 3.67, 3.67],\n    rotation: [1.8, 0, 0.55]\n  }, {\n    name: 'nopal001',\n    pathname: 'nopal001',\n    material: 'Cactus',\n    position: [-14.5, 0, 6],\n    scale: [.16, .16, .16],\n    rotation: [0, 3, 0.55]\n  }, {\n    name: 'boxcactus',\n    pathname: 'boxcactus',\n    material: 'boxcactus',\n    position: [-12.5, 5, 6],\n    scale: [8, 8, 8],\n    rotation: [0, 0, 0]\n  }];\n  const randomIndex = Math.floor(Math.random() * objects.length);\n  let randomObject = objects[randomIndex];\n  let {\n    name,\n    pathname,\n    material,\n    position,\n    scale,\n    rotation\n  } = randomObject;\n  const group = useRef();\n  const {\n    scene,\n    nodes,\n    materials\n  } = useGLTF(`./about-pictures/${pathname}.glb`);\n  useFrame(state => {\n    // This function runs 60 times/second, it binds this component to the render-loop.\n    // On unmount this subscription is cleaned up automatically.\n    // Rotate \n    const t = state.clock.getElapsedTime(); // Make it float\n\n    group.current.rotation.z = Math.sin(t / 90) / 5;\n    group.current.rotation.x = Math.cos(t) / 70;\n    group.current.rotation.y = Math.sin(t / 90) / 5;\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 10)) / 5;\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: randomObject.rotation,\n      scale: randomObject.scale,\n      position: randomObject.position,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes[pathname].geometry,\n        material: materials[material]\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n} //RIGHTSIDE\n\nexport function ObjectListRight(props) {\n  //objectsright \n  const objects = [{\n    name: 'concha',\n    pathname: 'PAN_CONCHA001',\n    material: 'Default OBJ.001',\n    position: [-10.5, .29, 3],\n    scale: [.345, .345, .345],\n    rotation: [2, 0, 0]\n  }, {\n    name: 'beer',\n    pathname: '14043_16_oz_Beer_Bottle_v2_L1',\n    material: 'Material__4',\n    position: [-10.5, 0, 3],\n    scale: [.36, .36, .36],\n    rotation: [.03, .59, 0]\n  }];\n  const randomIndex = Math.floor(Math.random() * objects.length);\n  let randomObject = objects[randomIndex];\n  let {\n    name,\n    pathname,\n    material,\n    position,\n    scale,\n    rotation\n  } = randomObject;\n  const group = useRef();\n  const {\n    scene,\n    nodes,\n    materials\n  } = useGLTF(`./about-pictures/${pathname}.glb`);\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: randomObject.rotation,\n      scale: randomObject.scale,\n      position: randomObject.position,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes[pathname].geometry,\n        material: materials[material]\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n} //LEFTSIDE\n\nexport function ObjectListLeft(props) {\n  //objectsleft objectsright, objectsmiddle objectsmirror \n  const objects = [{\n    name: 'concha',\n    pathname: 'PAN_CONCHA001',\n    material: 'Default OBJ.001',\n    position: [-15, .29, 3],\n    scale: [.36, .36, .36],\n    rotation: [2, 0, 0]\n  }, {\n    name: 'beer',\n    pathname: '14043_16_oz_Beer_Bottle_v2_L1',\n    material: 'Material__4',\n    position: [-15, 0, 3],\n    scale: [.36, .36, .36],\n    rotation: [.03, .59, 0]\n  }];\n  const randomIndex = Math.floor(Math.random() * objects.length);\n  let randomObject = objects[randomIndex];\n  let {\n    name,\n    pathname,\n    material,\n    position,\n    scale,\n    rotation\n  } = randomObject;\n  const group = useRef();\n  const {\n    scene,\n    nodes,\n    materials\n  } = useGLTF(`./about-pictures/${pathname}.glb`);\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: randomObject.rotation,\n      scale: randomObject.scale,\n      position: randomObject.position,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes[pathname].geometry,\n        material: materials[material]\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 5\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 3\n  }, this);\n} // Models","map":{"version":3,"sources":["/Users/jawn/Documents/GitHub/jawn-nft/components/models.js"],"names":["THREE","React","Suspense","useState","useRef","Canvas","useFrame","createPortal","useGLTF","Stage","Sky","Stars","useFBO","OrbitControls","rotation","PerspectiveCamera","CameraShake","ContactShadows","ObjectListMirror","props","objects","name","pathname","material","position","scale","randomIndex","Math","floor","random","length","randomObject","group","scene","nodes","materials","state","t","clock","getElapsedTime","current","z","sin","x","cos","y","geometry","ObjectListCenter","ObjectListRight","ObjectListLeft"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport React, {  Suspense, useState, useRef } from 'react'\nimport { Canvas, useFrame, createPortal } from '@react-three/fiber'\nimport { useGLTF, Stage, Sky, Stars, useFBO, OrbitControls, rotation, PerspectiveCamera, CameraShake, ContactShadows } from '@react-three/drei'\n\n\n\n// NEW FORMAT CODE GENERATOR \n\n//MIRRORCHAR\n\nexport function ObjectListMirror(props) {\n\n  //objectsMirror\n  \n  const objects = [\n    {\n      name: 'angel',\n      pathname: 'angel',\n      material: 'Cactus',\n      position: [-1.9, 9, 8],\n      scale: [22, 22, 22],\n      rotation: [-2.9, 0, .49]\n    \n      \n    },\n    {\n      name: 'heem',\n      pathname: 'heem',\n      material: 'Cactus',\n      position: [-2.9, 12, 7],\n      scale: [15, 15, 15],\n      rotation: [0, -2, -.11]\n    },\n    {\n      name: 'boxer',\n      pathname: 'boxer',\n      material: 'Cactus',\n      position: [-5, 0, 12],\n      scale: [15, 15, 15],\n      rotation: [0, -4, 0]\n    }\n  ]\n  \n  const randomIndex = Math.floor(Math.random() * objects.length);\n  let randomObject = objects[randomIndex];\n  let { name, pathname, material, position, scale, rotation } = randomObject;\n  \n  const group = useRef()\n  const { scene, nodes, materials } = useGLTF(`./about-pictures/${pathname}.glb`)\n\n  useFrame((state) => {\n    // This function runs 60 times/second, it binds this component to the render-loop.\n    // On unmount this subscription is cleaned up automatically.\n\n    // Rotate \n    const t = state.clock.getElapsedTime()\n    \n\n    // Make it float\n    group.current.rotation.z = Math.sin(t / 12) / 5\n    group.current.rotation.x = Math.cos(t) / 9\n    group.current.rotation.y = Math.sin(t / 12) / 5\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 10)) / 5\n  })\n  \n  return (\n  \n    <group ref={group} {...props} dispose={null} >\n      <group rotation={randomObject.rotation} scale={randomObject.scale} position={randomObject.position} >\n        <mesh object={scene} {...props}  \n            castShadow\n            receiveShadow\n            geometry={nodes[pathname].geometry}\n            material={materials[material]} />\n      </group>\n    </group>\n  )\n  }\n\n\n\n\n//Center character \n\nexport function ObjectListCenter(props) {\n\n  //objects center \n  \n  const objects = [\n    {\n      name: 'plant',\n      pathname: 'planta',\n      material: 'StandardDFD8D4',\n      position: [-12.5, 3.25, 6],\n      scale: [3.67, 3.67, 3.67],\n      rotation: [1.8, 0, 0.55]\n    \n      \n    },\n    {\n      name: 'nopal001',\n      pathname: 'nopal001',\n      material: 'Cactus',\n      position: [-14.5, 0, 6],\n      scale: [.16, .16, .16],\n      rotation: [0, 3, 0.55]\n      \n    },\n    {\n      name: 'boxcactus',\n      pathname: 'boxcactus',\n      material: 'boxcactus',\n      position: [-12.5, 5, 6],\n      scale: [8, 8, 8],\n      rotation: [0, 0, 0]\n      \n    }\n  ]\n  \n  const randomIndex = Math.floor(Math.random() * objects.length);\n  let randomObject = objects[randomIndex];\n  let { name, pathname, material, position, scale, rotation } = randomObject;\n  \n  const group = useRef()\n  const { scene, nodes, materials } = useGLTF(`./about-pictures/${pathname}.glb`)\n\n  useFrame((state) => {\n    // This function runs 60 times/second, it binds this component to the render-loop.\n    // On unmount this subscription is cleaned up automatically.\n\n    // Rotate \n    const t = state.clock.getElapsedTime()\n    \n\n    // Make it float\n    group.current.rotation.z = Math.sin(t / 90) / 5\n    group.current.rotation.x = Math.cos(t) / 70\n    group.current.rotation.y = Math.sin(t / 90) / 5\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 10)) / 5\n  })\n  \n  return (\n  \n    <group ref={group} {...props} dispose={null} >\n      <group rotation={randomObject.rotation} scale={randomObject.scale} position={randomObject.position} >\n        <mesh object={scene} {...props}  \n            castShadow\n            receiveShadow\n            geometry={nodes[pathname].geometry}\n            material={materials[material]} />\n      </group>\n    </group>\n  )\n  }\n\n\n\n\n//RIGHTSIDE\n\nexport function ObjectListRight(props) {\n\n  //objectsright \n  \n  const objects = [\n    {\n      name: 'concha',\n      pathname: 'PAN_CONCHA001',\n      material: 'Default OBJ.001',\n      position: [-10.5, .29, 3],\n      scale: [.345, .345, .345],\n      rotation: [2, 0, 0]\n    \n      \n    },\n    {\n      name: 'beer',\n      pathname: '14043_16_oz_Beer_Bottle_v2_L1',\n      material: 'Material__4',\n      position: [-10.5, 0, 3],\n      scale: [.36, .36, .36],\n      rotation: [.03, .59, 0],\n    \n    }\n  ]\n  \n  const randomIndex = Math.floor(Math.random() * objects.length);\n  let randomObject = objects[randomIndex];\n  let { name, pathname, material, position, scale, rotation } = randomObject;\n  \n  const group = useRef()\n  const { scene, nodes, materials } = useGLTF(`./about-pictures/${pathname}.glb`);\n  \n  return (\n  \n    <group ref={group} {...props} dispose={null} >\n      <group rotation={randomObject.rotation} scale={randomObject.scale} position={randomObject.position} >\n        <mesh object={scene} {...props}  \n            castShadow\n            receiveShadow\n            geometry={nodes[pathname].geometry}\n            material={materials[material]} />\n      </group>\n    </group>\n  )\n  }\n\n//LEFTSIDE\n\nexport function ObjectListLeft(props) {\n\n//objectsleft objectsright, objectsmiddle objectsmirror \n\nconst objects = [\n  {\n    name: 'concha',\n    pathname: 'PAN_CONCHA001',\n    material: 'Default OBJ.001',\n    position: [-15, .29, 3],\n    scale: [.36, .36, .36],\n    rotation: [2, 0, 0]\n  \n    \n  },\n  {\n    name: 'beer',\n    pathname: '14043_16_oz_Beer_Bottle_v2_L1',\n    material: 'Material__4',\n    position: [-15, 0, 3],\n    scale: [.36, .36, .36],\n    rotation: [.03, .59, 0],\n  \n  }\n]\n\nconst randomIndex = Math.floor(Math.random() * objects.length);\nlet randomObject = objects[randomIndex];\nlet { name, pathname, material, position, scale, rotation } = randomObject;\n\nconst group = useRef()\nconst { scene, nodes, materials } = useGLTF(`./about-pictures/${pathname}.glb`);\n\nreturn (\n\n  <group ref={group} {...props} dispose={null} >\n    <group rotation={randomObject.rotation} scale={randomObject.scale} position={randomObject.position} >\n      <mesh object={scene} {...props}  \n          castShadow\n          receiveShadow\n          geometry={nodes[pathname].geometry}\n          material={materials[material]} />\n    </group>\n  </group>\n)\n}\n\n// Models \n"]},"metadata":{},"sourceType":"module"}