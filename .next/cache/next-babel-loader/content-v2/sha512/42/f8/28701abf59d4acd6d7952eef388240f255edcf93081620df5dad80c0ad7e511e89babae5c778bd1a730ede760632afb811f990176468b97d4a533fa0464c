{"ast":null,"code":"import _defineProperty from \"/Users/jawn/Documents/GitHub/jawn-nft/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jawn/Documents/GitHub/jawn-nft/components/models.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useRef } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { useGLTF } from '@react-three/drei';\nexport function Soda(props) {\n  _s();\n\n  var _useGLTF = useGLTF('https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/models/soda-bottle/model.gltf'),\n      scene = _useGLTF.scene;\n\n  return /*#__PURE__*/_jsxDEV(\"primitive\", _objectSpread({\n    object: scene\n  }, props), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Soda, \"o+hqw2nGnmzAsiWsKcbG4W2mWg4=\", false, function () {\n  return [useGLTF];\n});\n\n_c = Soda;\nexport function Concha(props) {\n  _s2();\n\n  var group = useRef();\n\n  var _useGLTF2 = useGLTF('./about-pictures/oneconcha.glb'),\n      scene = _useGLTF2.scene,\n      nodes = _useGLTF2.nodes,\n      materials = _useGLTF2.materials;\n\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n      object: scene\n    }, props), {}, {\n      castShadow: true,\n      receiveShadow: true,\n      geometry: nodes.PAN_CONCHA001.geometry,\n      material: materials['Default OBJ.001'],\n      rotation: [Math.PI / 2, 0, 0],\n      scale: [.35, .35, .35]\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Concha, \"sfvsFy1o/B/JWVVPp6Ny2ObmGjs=\", false, function () {\n  return [useGLTF];\n});\n\n_c2 = Concha;\nexport function Angel(props) {\n  _s3();\n\n  var group = useRef();\n\n  var _useGLTF3 = useGLTF('./about-pictures/angel.glb'),\n      scene = _useGLTF3.scene,\n      nodes = _useGLTF3.nodes,\n      materials = _useGLTF3.materials;\n\n  useFrame(function (state, delta) {\n    // Make it float\n    group.current.rotation.z = Math.sin(t / 1.5) / 5;\n    group.current.rotation.x = Math.cos(t) / 5;\n    group.current.rotation.y = Math.sin(t / 2) / 10;\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 1.5)) / 5;\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: [-2.8, 4.87, .49],\n      scale: [.8, .8, .8],\n      children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes.angel_1.geometry,\n        material: materials.Standard737373\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes.angel_2.geometry,\n        material: materials.Standard00DF00\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes.angel_3.geometry,\n        material: materials.StandardFFF0FD\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(Angel, \"YamCTjXD3vDnghrwNO0/Vddj8I8=\", false, function () {\n  return [useGLTF, useFrame];\n});\n\n_c3 = Angel;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Soda\");\n$RefreshReg$(_c2, \"Concha\");\n$RefreshReg$(_c3, \"Angel\");","map":{"version":3,"sources":["/Users/jawn/Documents/GitHub/jawn-nft/components/models.js"],"names":["useRef","useFrame","useGLTF","Soda","props","scene","Concha","group","nodes","materials","PAN_CONCHA001","geometry","Math","PI","Angel","state","delta","current","rotation","z","sin","t","x","cos","y","position","angel_1","Standard737373","angel_2","Standard00DF00","angel_3","StandardFFF0FD"],"mappings":"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","sourcesContent":["import { useRef } from 'react'\nimport { useFrame } from '@react-three/fiber'\nimport { useGLTF } from '@react-three/drei'\n\n\nexport function Soda(props) {\n  const { scene } = useGLTF('https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/models/soda-bottle/model.gltf')\n  return <primitive object={scene} {...props} />\n}\n\nexport function Concha(props) {\n  const group = useRef()\n  const { scene, nodes, materials } =useGLTF('./about-pictures/oneconcha.glb')\n  return (\n    <group ref={group} {...props} dispose={null}>\n    <mesh object={scene} {...props}  castShadow\n        receiveShadow\n        geometry={nodes.PAN_CONCHA001.geometry}\n        material={materials['Default OBJ.001']}\n        rotation={[Math.PI / 2, 0, 0]}\n        scale={[.35, .35, .35]}/>\n\n    </group>\n  )\n}\n\nexport function Angel(props) {\n  const group = useRef()\n  const { scene, nodes, materials } = useGLTF('./about-pictures/angel.glb')\n\n  useFrame((state, delta) => {\n \n    // Make it float\n    group.current.rotation.z = Math.sin(t / 1.5) / 5\n    group.current.rotation.x = Math.cos(t) / 5\n    group.current.rotation.y = Math.sin(t / 2) / 10\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 1.5)) / 5\n  })\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group rotation={[-2.8, 4.87, .49]} scale={[.8, .8, .8]}>\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.angel_1.geometry}\n          material={materials.Standard737373}\n        />\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.angel_2.geometry}\n          material={materials.Standard00DF00}\n        />\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.angel_3.geometry}\n          material={materials.StandardFFF0FD}\n        />\n      </group>\n    </group>\n  )\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}