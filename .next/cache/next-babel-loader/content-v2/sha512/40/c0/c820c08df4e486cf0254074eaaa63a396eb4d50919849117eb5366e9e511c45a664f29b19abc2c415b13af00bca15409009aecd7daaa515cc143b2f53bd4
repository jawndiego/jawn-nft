{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jawn/Documents/GitHub/jawn-nft/components/models.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRef } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { useGLTF } from '@react-three/drei'; //randomly loaded models MirrorCharacter\n\nexport function MirrorCharacter(props) {\n  const objectNames = ['PAN_CONCHA001', '14043_16_oz_Beer_Bottle_v2_L1'];\n  const randomIndex = Math.floor(Math.random() * objectNames.length);\n  let randomObjectName = objectNames[randomIndex];\n  let materialName;\n  const group = useRef();\n  const {\n    scene,\n    nodes,\n    materials\n  } = useGLTF(`./about-pictures/${randomObjectName}.glb`);\n\n  if (randomObjectName == 'PAN_CONCHA001') {\n    return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n      ref: group\n    }, props), {}, {\n      dispose: null,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes[randomObjectName].geometry,\n        material: materials['Default OBJ.001'],\n        rotation: [Math.PI / 2, 0, 0],\n        scale: [.35, .35, .35]\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n      ref: group\n    }, props), {}, {\n      dispose: null,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes[randomObjectName].geometry,\n        material: materials.Material__4,\n        rotation: [Math.PI / 2, 0, 0],\n        scale: [.35, .35, .35]\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n} //\n//randomly loaded models MainCharacter\n\nexport function MainCharacter(props) {\n  const objectNames = ['PAN_CONCHA001', '14043_16_oz_Beer_Bottle_v2_L1'];\n  const randomIndex = Math.floor(Math.random() * objectNames.length);\n  let randomObjectName = objectNames[randomIndex];\n  let materialName;\n  const group = useRef();\n  const {\n    scene,\n    nodes,\n    materials\n  } = useGLTF(`./about-pictures/${randomObjectName}.glb`);\n\n  if (randomObjectName == 'PAN_CONCHA001') {\n    return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n      ref: group\n    }, props), {}, {\n      dispose: null,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes[randomObjectName].geometry,\n        material: materials['Default OBJ.001'],\n        rotation: [Math.PI / 2, 0, 0],\n        scale: [.35, .35, .35]\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n      ref: group\n    }, props), {}, {\n      dispose: null,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes[randomObjectName].geometry,\n        material: materials.Material__4,\n        rotation: [Math.PI / 2, 0, 0],\n        scale: [.35, .35, .35]\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n} //\n//randomly loaded models RightSide\n\nexport function ObjectListRight(props) {\n  const objectNames = ['PAN_CONCHA001', '14043_16_oz_Beer_Bottle_v2_L1'];\n  const randomIndex = Math.floor(Math.random() * objectNames.length);\n  let randomObjectName = objectNames[randomIndex];\n  let materialName;\n  const group = useRef();\n  const {\n    scene,\n    nodes,\n    materials\n  } = useGLTF(`./about-pictures/${randomObjectName}.glb`);\n\n  if (randomObjectName == 'PAN_CONCHA001') {\n    return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n      ref: group\n    }, props), {}, {\n      dispose: null,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes[randomObjectName].geometry,\n        material: materials['Default OBJ.001'],\n        rotation: [Math.PI / 2, 0, 0],\n        scale: [.35, .35, .35]\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n      ref: group\n    }, props), {}, {\n      dispose: null,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes[randomObjectName].geometry,\n        material: materials.Material__4,\n        rotation: [Math.PI / 2, 0, 0],\n        scale: [.35, .35, .35]\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this);\n  }\n} //randomly loaded models LeftSide\n\nexport function ObjectListLeft(props) {\n  const objectNames = ['PAN_CONCHA001', '14043_16_oz_Beer_Bottle_v2_L1'];\n  const randomIndex = Math.floor(Math.random() * objectNames.length);\n  let randomObjectName = objectNames[randomIndex];\n  const group = useRef();\n  const {\n    scene,\n    nodes,\n    materials\n  } = useGLTF(`./about-pictures/${randomObjectName}.glb`);\n\n  if (randomObjectName == 'PAN_CONCHA001') {\n    return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n      ref: group\n    }, props), {}, {\n      dispose: null,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes[randomObjectName].geometry,\n        material: materials['Default OBJ.001'],\n        rotation: [Math.PI / 2, 0, 0],\n        scale: [.35, .35, .35]\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n      ref: group\n    }, props), {}, {\n      dispose: null,\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n        object: scene\n      }, props), {}, {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes[randomObjectName].geometry,\n        material: materials['Material__4'],\n        rotation: [Math.PI / 2, 0, 0],\n        scale: [.35, .35, .35]\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this);\n  }\n} //\n// NEW FORMAT CODE GENERATOR \n\nexport function objectListLeftNew(props) {\n  const objects = [{\n    name: 'concha',\n    pathname: 'PAN_CONCHA001',\n    material: 'Default OBJ.001',\n    position: [-10.5, 0, 3]\n  }, {\n    name: 'beer',\n    pathname: '14043_16_oz_Beer_Bottle_v2_L1',\n    material: 'Material__4',\n    position: [-10.5, 0, 3]\n  }];\n  const randomIndex = Math.floor(Math.random() * objectNames.length);\n  let randomObject = objects[randomIndex];\n  const {\n    name,\n    pathname,\n    material,\n    position\n  } = randomObject;\n  const group = useRef();\n  const {\n    scene,\n    nodes,\n    materials\n  } = useGLTF(`./about-pictures/${pathname}.glb`);\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    name: name,\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n      object: scene\n    }, props), {}, {\n      castShadow: true,\n      receiveShadow: true,\n      geometry: nodes[pathname].geometry,\n      material: materials[material],\n      position: position\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 3\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 3\n  }, this);\n}\nexport function Beer(props) {\n  const group = useRef();\n  const {\n    nodes,\n    materials\n  } = useGLTF('./about-pictures/14043_16_oz_Beer_Bottle_v2_L1.glb');\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      castShadow: true,\n      receiveShadow: true,\n      geometry: nodes['14043_16_oz_Beer_Bottle_v2_L1'].geometry,\n      material: materials.Material__4,\n      rotation: [0.03, -0.91, 0.03],\n      scale: [0.1, 0.1, 0.1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n}\nexport function Concha(props) {\n  const group = useRef();\n  const {\n    scene,\n    nodes,\n    materials\n  } = useGLTF('./about-pictures/PAN_CONCHA001.glb');\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n      object: scene\n    }, props), {}, {\n      castShadow: true,\n      receiveShadow: true,\n      geometry: nodes.PAN_CONCHA001.geometry,\n      material: materials['Default OBJ.001'],\n      rotation: [Math.PI / 2, 0, 0],\n      scale: [.35, .35, .35]\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 5\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n}\nexport function Plant(props) {\n  const group = useRef();\n  const {\n    scene,\n    nodes,\n    materials\n  } = useGLTF('/about-pictures/plant.gltf');\n  useFrame(state => {\n    // This function runs 60 times/second, it binds this component to the render-loop.\n    // On unmount this subscription is cleaned up automatically.\n    // Rotate fins\n    const t = state.clock.getElapsedTime(); // Make it float\n\n    group.current.rotation.z = Math.sin(t / 12) / 5;\n    group.current.rotation.x = Math.cos(t) / 9;\n    group.current.rotation.y = Math.sin(t / 12) / 5;\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 10)) / 5;\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({\n      object: scene\n    }, props), {}, {\n      castShadow: true,\n      receiveShadow: true,\n      geometry: nodes.planta_1.geometry,\n      material: materials['Standard737373.001'],\n      position: [0, 3, 3],\n      scale: 3.5,\n      rotation: [Math.PI / 2, 0, 0]\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      castShadow: true,\n      receiveShadow: true,\n      geometry: nodes.planta_2.geometry,\n      material: materials.StandardDFD8D4,\n      position: [0, 3, 3],\n      scale: 3.5,\n      rotation: [Math.PI / 2, 0, 0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      castShadow: true,\n      receiveShadow: true,\n      geometry: nodes.planta_3.geometry,\n      material: materials.ReflectiveFF3248,\n      position: [0, 3, 3],\n      scale: 3.5,\n      rotation: [Math.PI / 2, 0, 0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this);\n}\nexport function Angel(props) {\n  const group = useRef();\n  const {\n    scene,\n    nodes,\n    materials\n  } = useGLTF('./about-pictures/angel.glb');\n  useFrame(state => {\n    // This function runs 60 times/second, it binds this component to the render-loop.\n    // On unmount this subscription is cleaned up automatically.\n    // Rotate fins\n    const t = state.clock.getElapsedTime(); // Make it float\n\n    group.current.rotation.z = Math.sin(t / 12) / 5;\n    group.current.rotation.x = Math.cos(t) / 9;\n    group.current.rotation.y = Math.sin(t / 12) / 5;\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 10)) / 5;\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      rotation: [-2.8, 4.87, .49],\n      scale: [.8, .8, .8],\n      children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes.angel_1.geometry,\n        material: materials.Standard737373\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes.angel_2.geometry,\n        material: materials.Standard00DF00\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n        castShadow: true,\n        receiveShadow: true,\n        geometry: nodes.angel_3.geometry,\n        material: materials.StandardFFF0FD\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 329,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/jawn/Documents/GitHub/jawn-nft/components/models.js"],"names":["useRef","useFrame","useGLTF","MirrorCharacter","props","objectNames","randomIndex","Math","floor","random","length","randomObjectName","materialName","group","scene","nodes","materials","geometry","PI","Material__4","MainCharacter","ObjectListRight","ObjectListLeft","objectListLeftNew","objects","name","pathname","material","position","randomObject","Beer","Concha","PAN_CONCHA001","Plant","state","t","clock","getElapsedTime","current","rotation","z","sin","x","cos","y","planta_1","planta_2","StandardDFD8D4","planta_3","ReflectiveFF3248","Angel","angel_1","Standard737373","angel_2","Standard00DF00","angel_3","StandardFFF0FD"],"mappings":"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","sourcesContent":["import { useRef } from 'react'\nimport { useFrame } from '@react-three/fiber'\nimport { useGLTF } from '@react-three/drei'\n\n//randomly loaded models MirrorCharacter\n\nexport function MirrorCharacter(props) {\n  const objectNames = ['PAN_CONCHA001', '14043_16_oz_Beer_Bottle_v2_L1'];\n  const randomIndex = Math.floor(Math.random() * objectNames.length);\n  let randomObjectName = objectNames[randomIndex];\n  let materialName \n  const group = useRef()\n  const { scene, nodes, materials } = useGLTF(`./about-pictures/${randomObjectName}.glb`);\n\n  if (randomObjectName == 'PAN_CONCHA001' ) {\n    return (\n\n      <group ref={group} {...props} dispose={null}>\n      <mesh object={scene} {...props}  castShadow\n          receiveShadow\n          geometry={nodes[randomObjectName].geometry}\n          material={materials['Default OBJ.001']}\n          rotation={[Math.PI / 2, 0, 0]}\n          scale={[.35, .35, .35]}/>\n  \n      </group>\n    )\n  }\n  else {\n    return (\n\n      <group ref={group} {...props} dispose={null}>\n      <mesh object={scene} {...props}  castShadow\n          receiveShadow\n          geometry={nodes[randomObjectName].geometry}\n          material={materials.Material__4}\n          rotation={[Math.PI / 2, 0, 0]}\n          scale={[.35, .35, .35]}/>\n  \n      </group>\n    )\n\n    }\n\n}\n\n//\n\n//randomly loaded models MainCharacter\n\nexport function MainCharacter(props) {\n  const objectNames = ['PAN_CONCHA001', '14043_16_oz_Beer_Bottle_v2_L1'];\n  const randomIndex = Math.floor(Math.random() * objectNames.length);\n  let randomObjectName = objectNames[randomIndex];\n  let materialName \n  const group = useRef()\n  const { scene, nodes, materials } = useGLTF(`./about-pictures/${randomObjectName}.glb`);\n\n  if (randomObjectName == 'PAN_CONCHA001' ) {\n    return (\n\n      <group ref={group} {...props} dispose={null}>\n      <mesh object={scene} {...props}  castShadow\n          receiveShadow\n          geometry={nodes[randomObjectName].geometry}\n          material={materials['Default OBJ.001']}\n          rotation={[Math.PI / 2, 0, 0]}\n          scale={[.35, .35, .35]}/>\n  \n      </group>\n    )\n  }\n  else {\n    return (\n\n      <group ref={group} {...props} dispose={null}>\n      <mesh object={scene} {...props}  castShadow\n          receiveShadow\n          geometry={nodes[randomObjectName].geometry}\n          material={materials.Material__4}\n          rotation={[Math.PI / 2, 0, 0]}\n          scale={[.35, .35, .35]}/>\n  \n      </group>\n    )\n\n    }\n\n}\n//\n\n//randomly loaded models RightSide\n\nexport function ObjectListRight(props) {\n  const objectNames = ['PAN_CONCHA001', '14043_16_oz_Beer_Bottle_v2_L1'];\n  const randomIndex = Math.floor(Math.random() * objectNames.length);\n  let randomObjectName = objectNames[randomIndex];\n  let materialName \n  const group = useRef()\n  const { scene, nodes, materials } = useGLTF(`./about-pictures/${randomObjectName}.glb`);\n\n  if (randomObjectName == 'PAN_CONCHA001' ) {\n    return (\n\n      <group ref={group} {...props} dispose={null}>\n      <mesh object={scene} {...props}  castShadow\n          receiveShadow\n          geometry={nodes[randomObjectName].geometry}\n          material={materials['Default OBJ.001']}\n          rotation={[Math.PI / 2, 0, 0]}\n          scale={[.35, .35, .35]}/>\n  \n      </group>\n    )\n  }\n  else {\n    return (\n\n      <group ref={group} {...props} dispose={null}>\n      <mesh object={scene} {...props}  castShadow\n          receiveShadow\n          geometry={nodes[randomObjectName].geometry}\n          material={materials.Material__4}\n          rotation={[Math.PI / 2, 0, 0]}\n          scale={[.35, .35, .35]}/>\n  \n      </group>\n    )\n\n    }\n\n}\n\n\n//randomly loaded models LeftSide\n\nexport function ObjectListLeft(props) {\n  const objectNames = ['PAN_CONCHA001', '14043_16_oz_Beer_Bottle_v2_L1'];\n  const randomIndex = Math.floor(Math.random() * objectNames.length);\n  let randomObjectName = objectNames[randomIndex];\n\n\n  const group = useRef()\n  const { scene, nodes, materials } = useGLTF(`./about-pictures/${randomObjectName}.glb`);\n\n  if (randomObjectName == 'PAN_CONCHA001' ) {\n    return (\n\n      <group ref={group} {...props} dispose={null}>\n      <mesh object={scene} {...props}  castShadow\n          receiveShadow\n          geometry={nodes[randomObjectName].geometry}\n          material={materials['Default OBJ.001']}\n          rotation={[Math.PI / 2, 0, 0]}\n          scale={[.35, .35, .35]}/>\n  \n      </group>\n    )\n  }\n  else {\n    return (\n\n      <group ref={group} {...props} dispose={null}>\n      <mesh object={scene} {...props}  castShadow\n          receiveShadow\n          geometry={nodes[randomObjectName].geometry}\n          material={materials['Material__4']}\n          rotation={[Math.PI / 2, 0, 0]}\n          scale={[.35, .35, .35]}/>\n  \n      </group>\n    )\n\n    }\n\n}\n\n//\n\n// NEW FORMAT CODE GENERATOR \n\nexport function objectListLeftNew(props) {\n\nconst objects = [\n  {\n    name: 'concha',\n    pathname: 'PAN_CONCHA001',\n    material: 'Default OBJ.001',\n    position: [-10.5, 0, 3]\n    \n  },\n  {\n    name: 'beer',\n    pathname: '14043_16_oz_Beer_Bottle_v2_L1',\n    material: 'Material__4',\n    position: [-10.5, 0, 3]\n  }\n]\n\nconst randomIndex = Math.floor(Math.random() * objectNames.length);\nlet randomObject = objects[randomIndex];\nconst { name, pathname, material, position } = randomObject;\nconst group = useRef()\nconst { scene, nodes, materials } = useGLTF(`./about-pictures/${pathname}.glb`);\n\nreturn (\n\n  <group name={name} ref={group} {...props} dispose={null}>\n  <mesh object={scene} {...props}  castShadow\n      receiveShadow\n      geometry={nodes[pathname].geometry}\n      material={materials[material]}\n      position={position}/>\n\n  </group>\n)\n}\n\n\n\nexport function Beer(props) {\n  const group = useRef()\n  const { nodes, materials } = useGLTF('./about-pictures/14043_16_oz_Beer_Bottle_v2_L1.glb')\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes['14043_16_oz_Beer_Bottle_v2_L1'].geometry}\n        material={materials.Material__4}\n        rotation={[0.03, -0.91, 0.03]}\n        scale={[0.1, 0.1, 0.1]}\n      />\n    </group>\n  )\n}\n\nexport function Concha(props) {\n  const group = useRef()\n  const { scene, nodes, materials } =useGLTF('./about-pictures/PAN_CONCHA001.glb')\n  return (\n    <group ref={group} {...props} dispose={null}>\n    <mesh object={scene} {...props}  castShadow\n        receiveShadow\n        geometry={nodes.PAN_CONCHA001.geometry}\n        material={materials['Default OBJ.001']}\n        rotation={[Math.PI / 2, 0, 0]}\n        scale={[.35, .35, .35]}/>\n\n    </group>\n  )\n}\n\n\nexport function Plant(props) {\n  const group = useRef()\n  const { scene, nodes, materials } =useGLTF('/about-pictures/plant.gltf')\n\n  useFrame((state) => {\n    // This function runs 60 times/second, it binds this component to the render-loop.\n    // On unmount this subscription is cleaned up automatically.\n\n    // Rotate fins\n    const t = state.clock.getElapsedTime()\n    \n\n    // Make it float\n    group.current.rotation.z = Math.sin(t / 12) / 5\n    group.current.rotation.x = Math.cos(t) / 9\n    group.current.rotation.y = Math.sin(t / 12) / 5\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 10)) / 5\n  })\n  \n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh object={scene} {...props} \n        castShadow\n        receiveShadow\n        geometry={nodes.planta_1.geometry}\n        material={materials['Standard737373.001']}\n        position={[0, 3, 3]}\n        scale ={3.5}\n        rotation={[Math.PI / 2, 0, 0]}\n      />\n      <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.planta_2.geometry}\n          material={materials.StandardDFD8D4}\n          position={[0, 3, 3]}\n          scale ={3.5}\n          rotation={[Math.PI / 2, 0, 0]}\n        />\n        <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.planta_3.geometry}\n        material={materials.ReflectiveFF3248}\n        position={[0, 3, 3]}\n        scale ={3.5}\n        rotation={[Math.PI / 2, 0, 0]}\n        />\n    \n    </group>\n  )\n}\n\n\nexport function Angel(props) {\n  const group = useRef()\n  const { scene, nodes, materials } = useGLTF('./about-pictures/angel.glb')\n\n  useFrame((state) => {\n    // This function runs 60 times/second, it binds this component to the render-loop.\n    // On unmount this subscription is cleaned up automatically.\n\n    // Rotate fins\n    const t = state.clock.getElapsedTime()\n    \n\n    // Make it float\n    group.current.rotation.z = Math.sin(t / 12) / 5\n    group.current.rotation.x = Math.cos(t) / 9\n    group.current.rotation.y = Math.sin(t / 12) / 5\n    group.current.position.y = 0.5 + (1 + Math.sin(t / 10)) / 5\n  })\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group rotation={[-2.8, 4.87, .49]} scale={[.8, .8, .8]}>\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.angel_1.geometry}\n          material={materials.Standard737373}\n        />\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.angel_2.geometry}\n          material={materials.Standard00DF00}\n        />\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.angel_3.geometry}\n          material={materials.StandardFFF0FD}\n        />\n        \n      </group>\n    </group>\n  )\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}