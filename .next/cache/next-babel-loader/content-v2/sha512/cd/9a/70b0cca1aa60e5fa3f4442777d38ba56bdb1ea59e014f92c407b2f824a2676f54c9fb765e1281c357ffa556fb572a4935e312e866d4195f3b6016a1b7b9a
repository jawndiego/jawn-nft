{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jawn/Documents/GitHub/jawn-nft/pages/jawn/[id].js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from \"../../components/head\";\nimport GoHome from \"../../components/go-home\";\nimport find from \"lodash/find\";\nimport { NFTFullPage, MediaConfiguration } from \"@zoralabs/nft-components\";\nimport { MediaFetchAgent, Networks } from \"@zoralabs/nft-hooks\";\nimport { NFT_LIST } from \"../../lib/constants\";\nexport const strings = {\n  OPEN_OFFERS: \"\"\n};\n\nconst Doge = ({\n  post,\n  nftData\n}) => {\n  const config = {\n    allowOffer: post.auctionState,\n    showPerpetual: false,\n    refreshInterval: 45\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      title: post.title,\n      description: nftData.description,\n      ogImage: `${nftData.zoraNFT.contentURI}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoHome, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      className: `doge-nft_wrapper ${!post.auctionState ? \"hide\" : \"\"}`,\n      children: /*#__PURE__*/_jsxDEV(MediaConfiguration, {\n        strings: strings,\n        children: /*#__PURE__*/_jsxDEV(NFTFullPage, {\n          id: post.id,\n          config: config\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport async function getStaticPaths() {\n  const paths = NFT_LIST.map(nft => ({\n    params: {\n      id: nft.slug\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  const post = find(NFT_LIST, {\n    slug: params.id\n  });\n  const fetcher = new MediaFetchAgent(Networks.MAINNET);\n  const nft = await fetcher.loadZNFTData(post.id);\n  const metadata = await fetcher.fetchIPFSMetadata(nft.nft.metadataURI);\n\n  function prepareJson(json) {\n    return JSON.parse(JSON.stringify(json));\n  }\n\n  const nftData = prepareJson(_objectSpread(_objectSpread({}, nft), metadata));\n  return {\n    props: {\n      post,\n      nftData\n    }\n  };\n}\nexport default Doge;","map":{"version":3,"sources":["/Users/jawn/Documents/GitHub/jawn-nft/pages/jawn/[id].js"],"names":["Head","GoHome","find","NFTFullPage","MediaConfiguration","MediaFetchAgent","Networks","NFT_LIST","strings","OPEN_OFFERS","Doge","post","nftData","config","allowOffer","auctionState","showPerpetual","refreshInterval","title","description","zoraNFT","contentURI","id","getStaticPaths","paths","map","nft","params","slug","fallback","getStaticProps","fetcher","MAINNET","loadZNFTData","metadata","fetchIPFSMetadata","metadataURI","prepareJson","json","JSON","parse","stringify","props"],"mappings":";;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,uBAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,WAAT,EAAsBC,kBAAtB,QAAgD,0BAAhD;AACA,SAASC,eAAT,EAA0BC,QAA1B,QAA0C,qBAA1C;AAGA,SAASC,QAAT,QAAyB,qBAAzB;AAGA,OAAO,MAAMC,OAAO,GAAG;AACrBC,EAAAA,WAAW,EAAE;AADQ,CAAhB;;AAIP,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AAClC,QAAMC,MAAM,GAAG;AACbC,IAAAA,UAAU,EAAEH,IAAI,CAACI,YADJ;AAEbC,IAAAA,aAAa,EAAE,KAFF;AAGbC,IAAAA,eAAe,EAAE;AAHJ,GAAf;AAKA,sBACE;AAAA,4BACE,QAAC,IAAD;AACE,MAAA,KAAK,EAAEN,IAAI,CAACO,KADd;AAEE,MAAA,WAAW,EAAEN,OAAO,CAACO,WAFvB;AAGE,MAAA,OAAO,EAAG,GAAEP,OAAO,CAACQ,OAAR,CAAgBC,UAAW;AAHzC;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YANF,eAOE;AACE,MAAA,SAAS,EAAG,oBAAmB,CAACV,IAAI,CAACI,YAAN,GAAqB,MAArB,GAA8B,EAAG,EADlE;AAAA,6BAGE,QAAC,kBAAD;AAAoB,QAAA,OAAO,EAAEP,OAA7B;AAAA,+BACE,QAAC,WAAD;AAAa,UAAA,EAAE,EAAEG,IAAI,CAACW,EAAtB;AAA0B,UAAA,MAAM,EAAET;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA,kBADF;AAkBD,CAxBD;;AA0BA,OAAO,eAAeU,cAAf,GAAgC;AACrC,QAAMC,KAAK,GAAGjB,QAAQ,CAACkB,GAAT,CAAcC,GAAD,KAAU;AACnCC,IAAAA,MAAM,EAAE;AAAEL,MAAAA,EAAE,EAAEI,GAAG,CAACE;AAAV;AAD2B,GAAV,CAAb,CAAd;AAGA,SAAO;AAAEJ,IAAAA,KAAF;AAASK,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAED,OAAO,eAAeC,cAAf,CAA8B;AAAEH,EAAAA;AAAF,CAA9B,EAA0C;AAC/C,QAAMhB,IAAI,GAAGT,IAAI,CAACK,QAAD,EAAW;AAAEqB,IAAAA,IAAI,EAAED,MAAM,CAACL;AAAf,GAAX,CAAjB;AACA,QAAMS,OAAO,GAAG,IAAI1B,eAAJ,CAAoBC,QAAQ,CAAC0B,OAA7B,CAAhB;AAEA,QAAMN,GAAG,GAAG,MAAMK,OAAO,CAACE,YAAR,CAAqBtB,IAAI,CAACW,EAA1B,CAAlB;AACA,QAAMY,QAAQ,GAAG,MAAMH,OAAO,CAACI,iBAAR,CAA0BT,GAAG,CAACA,GAAJ,CAAQU,WAAlC,CAAvB;;AAEA,WAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,IAAf,CAAX,CAAP;AACD;;AAED,QAAM1B,OAAO,GAAGyB,WAAW,iCACtBX,GADsB,GAEtBQ,QAFsB,EAA3B;AAKA,SAAO;AACLQ,IAAAA,KAAK,EAAE;AACL/B,MAAAA,IADK;AAELC,MAAAA;AAFK;AADF,GAAP;AAMD;AAED,eAAeF,IAAf","sourcesContent":["import Head from \"../../components/head\";\nimport GoHome from \"../../components/go-home\";\nimport find from \"lodash/find\";\nimport { NFTFullPage, MediaConfiguration } from \"@zoralabs/nft-components\";\nimport { MediaFetchAgent, Networks } from \"@zoralabs/nft-hooks\";\n\n\nimport { NFT_LIST } from \"../../lib/constants\";\n\n\nexport const strings = {\n  OPEN_OFFERS: \"\",\n};\n\nconst Doge = ({ post, nftData }) => {\n  const config = {\n    allowOffer: post.auctionState,\n    showPerpetual: false,\n    refreshInterval: 45,\n  };\n  return (\n    <>\n      <Head\n        title={post.title}\n        description={nftData.description}\n        ogImage={`${nftData.zoraNFT.contentURI}`}\n      />\n      <GoHome />\n      <article\n        className={`doge-nft_wrapper ${!post.auctionState ? \"hide\" : \"\"}`}\n      >\n        <MediaConfiguration strings={strings}>\n          <NFTFullPage id={post.id} config={config} />\n        </MediaConfiguration>\n      </article>\n    \n    </>\n  );\n};\n\nexport async function getStaticPaths() {\n  const paths = NFT_LIST.map((nft) => ({\n    params: { id: nft.slug },\n  }));\n  return { paths, fallback: false };\n}\n\nexport async function getStaticProps({ params }) {\n  const post = find(NFT_LIST, { slug: params.id });\n  const fetcher = new MediaFetchAgent(Networks.MAINNET);\n\n  const nft = await fetcher.loadZNFTData(post.id);\n  const metadata = await fetcher.fetchIPFSMetadata(nft.nft.metadataURI);\n\n  function prepareJson(json) {\n    return JSON.parse(JSON.stringify(json));\n  }\n\n  const nftData = prepareJson({\n    ...nft,\n    ...metadata,\n  });\n\n  return {\n    props: {\n      post,\n      nftData,\n    },\n  };\n}\n\nexport default Doge;\n"]},"metadata":{},"sourceType":"module"}